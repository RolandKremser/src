// Generated by delombok at Fri Feb 12 21:32:09 UTC 2021
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
package com.microsoft.aad.msal4j;

//import lombok.*;
import java.util.Set;
import java.util.function.Consumer;
import static com.microsoft.aad.msal4j.ParameterValidationUtils.validateNotEmpty;

/**
 * Object containing parameters for device code flow. Can be used as parameter to
 * {@link PublicClientApplication#acquireToken(DeviceCodeFlowParameters)}. For more details,
 * see https://aka.ms/msal4j-device-code
 */
public class DeviceCodeFlowParameters implements IApiParameters {
    /**
     * Scopes to which the application is requesting access to.
     */
    private Set<String> scopes;
    /**
     * Claims to be requested through the OIDC claims request parameter, allowing requests for standard and custom claims
     */
    private ClaimsRequest claims;
    /**
     * Receives the device code returned from the first step of Oauth2.0 device code flow. The
     * {@link DeviceCode#verificationUri} and the {@link DeviceCode#userCode} should be shown
     * to the end user.
     *
     * For more details, see https://aka.ms/msal4j-device-code
     */
    private Consumer<DeviceCode> deviceCodeConsumer;

    private static DeviceCodeFlowParametersBuilder builder() {
        return new DeviceCodeFlowParametersBuilder();
    }

    /**
     * Builder for {@link DeviceCodeFlowParameters}
     * @param scopes scopes application is requesting access to
     * @param deviceCodeConsumer {@link Consumer} of {@link DeviceCode}
     * @return builder that can be used to construct DeviceCodeFlowParameters
     */
    public static DeviceCodeFlowParametersBuilder builder(Set<String> scopes, Consumer<DeviceCode> deviceCodeConsumer) {
        validateNotEmpty("scopes", scopes);
        return builder().scopes(scopes).deviceCodeConsumer(deviceCodeConsumer);
    }


    @java.lang.SuppressWarnings("all")
    public static class DeviceCodeFlowParametersBuilder {
        @java.lang.SuppressWarnings("all")
        private Set<String> scopes;
        @java.lang.SuppressWarnings("all")
        private ClaimsRequest claims;
        @java.lang.SuppressWarnings("all")
        private Consumer<DeviceCode> deviceCodeConsumer;

        @java.lang.SuppressWarnings("all")
        DeviceCodeFlowParametersBuilder() {
        }

        @java.lang.SuppressWarnings("all")
        public DeviceCodeFlowParametersBuilder scopes(final Set<String> scopes) {
            this.scopes = scopes;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public DeviceCodeFlowParametersBuilder claims(final ClaimsRequest claims) {
            this.claims = claims;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public DeviceCodeFlowParametersBuilder deviceCodeConsumer(final Consumer<DeviceCode> deviceCodeConsumer) {
            this.deviceCodeConsumer = deviceCodeConsumer;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public DeviceCodeFlowParameters build() {
            return new DeviceCodeFlowParameters(scopes, claims, deviceCodeConsumer);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        public java.lang.String toString() {
            return "DeviceCodeFlowParameters.DeviceCodeFlowParametersBuilder(scopes=" + this.scopes + ", claims=" + this.claims + ", deviceCodeConsumer=" + this.deviceCodeConsumer + ")";
        }
    }

    /**
     * Scopes to which the application is requesting access to.
     */
    @java.lang.SuppressWarnings("all")
    public Set<String> scopes() {
        return this.scopes;
    }

    /**
     * Claims to be requested through the OIDC claims request parameter, allowing requests for standard and custom claims
     */
    @java.lang.SuppressWarnings("all")
    public ClaimsRequest claims() {
        return this.claims;
    }

    /**
     * Receives the device code returned from the first step of Oauth2.0 device code flow. The
     * {@link DeviceCode#verificationUri} and the {@link DeviceCode#userCode} should be shown
     * to the end user.
     *
     * For more details, see https://aka.ms/msal4j-device-code
     */
    @java.lang.SuppressWarnings("all")
    public Consumer<DeviceCode> deviceCodeConsumer() {
        return this.deviceCodeConsumer;
    }

    @java.lang.SuppressWarnings("all")
    private DeviceCodeFlowParameters(final Set<String> scopes, final ClaimsRequest claims, final Consumer<DeviceCode> deviceCodeConsumer) {
        if (scopes == null) {
            throw new java.lang.NullPointerException("scopes is marked @NonNull but is null");
        }
        if (deviceCodeConsumer == null) {
            throw new java.lang.NullPointerException("deviceCodeConsumer is marked @NonNull but is null");
        }
        this.scopes = scopes;
        this.claims = claims;
        this.deviceCodeConsumer = deviceCodeConsumer;
    }
}
