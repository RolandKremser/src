// Generated by delombok at Fri Feb 12 21:32:09 UTC 2021
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
package com.microsoft.aad.msal4j;

//import lombok.*;
import java.util.Set;
import static com.microsoft.aad.msal4j.ParameterValidationUtils.validateNotEmpty;

/**
 * Object containing parameters for On-Behalf-Of flow. Can be used as parameter to
 * {@link ConfidentialClientApplication#acquireToken(OnBehalfOfParameters)}
 *
 * For more details, see https://aka.ms/msal4j-on-behalf-of
 */
public class OnBehalfOfParameters implements IApiParameters {

    private Set<String> scopes;
    /**
     * Claims to be requested through the OIDC claims request parameter, allowing requests for standard and custom claims
     */
    private ClaimsRequest claims;
    private IUserAssertion userAssertion;

    private static OnBehalfOfParametersBuilder builder() {
        return new OnBehalfOfParametersBuilder();
    }

    /**
     * Builder for {@link OnBehalfOfParameters}
     * @param scopes scopes application is requesting access to
     * @param userAssertion {@link UserAssertion} created from access token received
     * @return builder that can be used to construct OnBehalfOfParameters
     */
    public static OnBehalfOfParametersBuilder builder(Set<String> scopes, UserAssertion userAssertion) {
        validateNotEmpty("scopes", scopes);
        return builder().scopes(scopes).userAssertion(userAssertion);
    }


    @java.lang.SuppressWarnings("all")
    public static class OnBehalfOfParametersBuilder {
        @java.lang.SuppressWarnings("all")
        private Set<String> scopes;
        @java.lang.SuppressWarnings("all")
        private ClaimsRequest claims;
        @java.lang.SuppressWarnings("all")
        private IUserAssertion userAssertion;

        @java.lang.SuppressWarnings("all")
        OnBehalfOfParametersBuilder() {
        }

        @java.lang.SuppressWarnings("all")
        public OnBehalfOfParametersBuilder scopes(final Set<String> scopes) {
            this.scopes = scopes;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public OnBehalfOfParametersBuilder claims(final ClaimsRequest claims) {
            this.claims = claims;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public OnBehalfOfParametersBuilder userAssertion(final IUserAssertion userAssertion) {
            this.userAssertion = userAssertion;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public OnBehalfOfParameters build() {
            return new OnBehalfOfParameters(scopes, claims, userAssertion);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        public java.lang.String toString() {
            return "OnBehalfOfParameters.OnBehalfOfParametersBuilder(scopes=" + this.scopes + ", claims=" + this.claims + ", userAssertion=" + this.userAssertion + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    public Set<String> scopes() {
        return this.scopes;
    }

    /**
     * Claims to be requested through the OIDC claims request parameter, allowing requests for standard and custom claims
     */
    @java.lang.SuppressWarnings("all")
    public ClaimsRequest claims() {
        return this.claims;
    }

    @java.lang.SuppressWarnings("all")
    public IUserAssertion userAssertion() {
        return this.userAssertion;
    }

    @java.lang.SuppressWarnings("all")
    private OnBehalfOfParameters(final Set<String> scopes, final ClaimsRequest claims, final IUserAssertion userAssertion) {
        if (scopes == null) {
            throw new java.lang.NullPointerException("scopes is marked @NonNull but is null");
        }
        if (userAssertion == null) {
            throw new java.lang.NullPointerException("userAssertion is marked @NonNull but is null");
        }
        this.scopes = scopes;
        this.claims = claims;
        this.userAssertion = userAssertion;
    }
}
