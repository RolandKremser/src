// Generated by delombok at Fri Feb 12 21:32:09 UTC 2021
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
package com.microsoft.aad.msal4j;

//import lombok.NonNull;
import java.net.URI;
import java.util.Set;
import static com.microsoft.aad.msal4j.ParameterValidationUtils.validateNotNull;

/**
 * Object containing parameters for interactive requests. Can be used as parameter to
 * {@link PublicClientApplication#acquireToken(InteractiveRequestParameters)}.
 *
 * For more details, see https://aka.ms/msal4j-interactive-request.
 */
public class InteractiveRequestParameters implements IApiParameters {
    /**
     * Redirect URI where MSAL will listen to for the authorization code returned by Azure AD.
     * Should be a loopback address with a port specified (for example, http://localhost:3671). If no
     * port is specified, MSAL will find an open port. For more information, see
     * https://aka.ms/msal4j-interactive-request.
     */
    private URI redirectUri;
    /**
     * Claims to be requested through the OIDC claims request parameter, allowing requests for standard and custom claims
     */
    private ClaimsRequest claims;
    /**
     * Scopes that the application is requesting access to and the user will consent to.
     */
    private Set<String> scopes;
    /**
     * Indicate the type of user interaction that is required.
     */
    private Prompt prompt;
    /**
     * Can be used to pre-fill the username/email address field of the sign-in page for the user,
     * if you know the username/email address ahead of time. Often apps use this parameter during
     * re-authentication, having already extracted the username from a previous sign-in using the
     * preferred_username claim.
     */
    private String loginHint;
    /**
     * Provides a hint about the tenant or domain that the user should use to sign in. The value
     * of the domain hint is a registered domain for the tenant.
     */
    private String domainHint;
    /**
     * Sets {@link SystemBrowserOptions} to be used by the PublicClientApplication
     */
    private SystemBrowserOptions systemBrowserOptions;
    private String claimsChallenge;

    private static InteractiveRequestParametersBuilder builder() {
        return new InteractiveRequestParametersBuilder();
    }

    public static InteractiveRequestParametersBuilder builder(URI redirectUri) {
        validateNotNull("redirect_uri", redirectUri);
        return builder().redirectUri(redirectUri);
    }


    @java.lang.SuppressWarnings("all")
    public static class InteractiveRequestParametersBuilder {
        @java.lang.SuppressWarnings("all")
        private URI redirectUri;
        @java.lang.SuppressWarnings("all")
        private ClaimsRequest claims;
        @java.lang.SuppressWarnings("all")
        private Set<String> scopes;
        @java.lang.SuppressWarnings("all")
        private Prompt prompt;
        @java.lang.SuppressWarnings("all")
        private String loginHint;
        @java.lang.SuppressWarnings("all")
        private String domainHint;
        @java.lang.SuppressWarnings("all")
        private SystemBrowserOptions systemBrowserOptions;
        @java.lang.SuppressWarnings("all")
        private String claimsChallenge;

        @java.lang.SuppressWarnings("all")
        InteractiveRequestParametersBuilder() {
        }

        @java.lang.SuppressWarnings("all")
        public InteractiveRequestParametersBuilder redirectUri(final URI redirectUri) {
            this.redirectUri = redirectUri;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public InteractiveRequestParametersBuilder claims(final ClaimsRequest claims) {
            this.claims = claims;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public InteractiveRequestParametersBuilder scopes(final Set<String> scopes) {
            this.scopes = scopes;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public InteractiveRequestParametersBuilder prompt(final Prompt prompt) {
            this.prompt = prompt;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public InteractiveRequestParametersBuilder loginHint(final String loginHint) {
            this.loginHint = loginHint;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public InteractiveRequestParametersBuilder domainHint(final String domainHint) {
            this.domainHint = domainHint;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public InteractiveRequestParametersBuilder systemBrowserOptions(final SystemBrowserOptions systemBrowserOptions) {
            this.systemBrowserOptions = systemBrowserOptions;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public InteractiveRequestParametersBuilder claimsChallenge(final String claimsChallenge) {
            this.claimsChallenge = claimsChallenge;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public InteractiveRequestParameters build() {
            return new InteractiveRequestParameters(redirectUri, claims, scopes, prompt, loginHint, domainHint, systemBrowserOptions, claimsChallenge);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        public java.lang.String toString() {
            return "InteractiveRequestParameters.InteractiveRequestParametersBuilder(redirectUri=" + this.redirectUri + ", claims=" + this.claims + ", scopes=" + this.scopes + ", prompt=" + this.prompt + ", loginHint=" + this.loginHint + ", domainHint=" + this.domainHint + ", systemBrowserOptions=" + this.systemBrowserOptions + ", claimsChallenge=" + this.claimsChallenge + ")";
        }
    }

    /**
     * Redirect URI where MSAL will listen to for the authorization code returned by Azure AD.
     * Should be a loopback address with a port specified (for example, http://localhost:3671). If no
     * port is specified, MSAL will find an open port. For more information, see
     * https://aka.ms/msal4j-interactive-request.
     */
    @java.lang.SuppressWarnings("all")
    public URI redirectUri() {
        return this.redirectUri;
    }

    /**
     * Claims to be requested through the OIDC claims request parameter, allowing requests for standard and custom claims
     */
    @java.lang.SuppressWarnings("all")
    public ClaimsRequest claims() {
        return this.claims;
    }

    /**
     * Scopes that the application is requesting access to and the user will consent to.
     */
    @java.lang.SuppressWarnings("all")
    public Set<String> scopes() {
        return this.scopes;
    }

    /**
     * Indicate the type of user interaction that is required.
     */
    @java.lang.SuppressWarnings("all")
    public Prompt prompt() {
        return this.prompt;
    }

    /**
     * Can be used to pre-fill the username/email address field of the sign-in page for the user,
     * if you know the username/email address ahead of time. Often apps use this parameter during
     * re-authentication, having already extracted the username from a previous sign-in using the
     * preferred_username claim.
     */
    @java.lang.SuppressWarnings("all")
    public String loginHint() {
        return this.loginHint;
    }

    /**
     * Provides a hint about the tenant or domain that the user should use to sign in. The value
     * of the domain hint is a registered domain for the tenant.
     */
    @java.lang.SuppressWarnings("all")
    public String domainHint() {
        return this.domainHint;
    }

    /**
     * Sets {@link SystemBrowserOptions} to be used by the PublicClientApplication
     */
    @java.lang.SuppressWarnings("all")
    public SystemBrowserOptions systemBrowserOptions() {
        return this.systemBrowserOptions;
    }

    @java.lang.SuppressWarnings("all")
    public String claimsChallenge() {
        return this.claimsChallenge;
    }

    @java.lang.SuppressWarnings("all")
    private InteractiveRequestParameters(final URI redirectUri, final ClaimsRequest claims, final Set<String> scopes, final Prompt prompt, final String loginHint, final String domainHint, final SystemBrowserOptions systemBrowserOptions, final String claimsChallenge) {
        if (redirectUri == null) {
            throw new java.lang.NullPointerException("redirectUri is marked @NonNull but is null");
        }
        this.redirectUri = redirectUri;
        this.claims = claims;
        this.scopes = scopes;
        this.prompt = prompt;
        this.loginHint = loginHint;
        this.domainHint = domainHint;
        this.systemBrowserOptions = systemBrowserOptions;
        this.claimsChallenge = claimsChallenge;
    }

    /**
     * Redirect URI where MSAL will listen to for the authorization code returned by Azure AD.
     * Should be a loopback address with a port specified (for example, http://localhost:3671). If no
     * port is specified, MSAL will find an open port. For more information, see
     * https://aka.ms/msal4j-interactive-request.
     * @return this
     */
    @java.lang.SuppressWarnings("all")
    InteractiveRequestParameters redirectUri(final URI redirectUri) {
        if (redirectUri == null) {
            throw new java.lang.NullPointerException("redirectUri is marked @NonNull but is null");
        }
        this.redirectUri = redirectUri;
        return this;
    }
}
